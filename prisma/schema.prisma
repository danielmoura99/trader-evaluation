generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id               String       @id @default(cuid())
  name             String
  cpf              String
  phone            String
  birthDate        DateTime
  address          String?
  zipCode          String?
  email            String
  platform         String
  plan             String
  traderStatus     String
  startDate        DateTime?
  endDate          DateTime?
  observation      String?
  cancellationDate DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  contacts         Contact[]
  paidAccount      PaidAccount?

  @@map("clients")
}

model User {
  id        String   @id @default(cuid())
  name      String   @unique
  email     String   @unique
  password  String
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Contact {
  id        String   @id @default(cuid())
  clientId  String
  status    String
  date      DateTime
  notes     String
  createdAt DateTime @default(now())
  client    Client   @relation(fields: [clientId], references: [id])

  @@map("contacts")
}

model Payment {
  id               String   @id @default(cuid())
  hublaPaymentId   String   @unique
  platform         String
  plan             String
  amount           Int
  customerEmail    String
  customerName     String
  status           String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  customerPhone    String
  saleDate         DateTime
  customerDocument String
  paymentMethod    String

  @@map("payments")
}

model PaidAccount {
  id                 String           @id @default(cuid())
  clientId           String           @unique
  platform           String
  plan               String
  status             String
  startDate          DateTime?
  endDate            DateTime?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  autoRenewalEnabled Boolean          @default(true)
  lastRenewalDate    DateTime?
  renewalPaymentId   String?
  renewals           AccountRenewal[]
  client             Client           @relation(fields: [clientId], references: [id])

  @@map("paid_accounts")
}

model MgcClient {
  id               String    @id @default(cuid())
  name             String
  cpf              String
  phone            String
  email            String
  birthDate        DateTime
  address          String?
  zipCode          String?
  platform         String
  plan             String
  status           String
  startDate        DateTime?
  endDate          DateTime?
  cancellationDate DateTime?
  observation      String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@map("mgc_clients")
}

model AccountRenewal {
  id            String      @id @default(cuid())
  paidAccountId String
  paymentId     String
  renewalDate   DateTime
  amount        Int
  platform      String
  status        String
  createdAt     DateTime    @default(now())
  paidAccount   PaidAccount @relation(fields: [paidAccountId], references: [id])

  @@map("account_renewals")
}
